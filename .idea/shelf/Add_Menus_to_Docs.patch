Index: scrupal-api/src/scrupal/api/Node.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-api/src/scrupal/api/Node.scala	(revision 6bdba0e75c739e0ff7452474fba4615553fc9f8e)
+++ scrupal-api/src/scrupal/api/Node.scala	(revision )
@@ -140,6 +140,24 @@
   def apply(ctxt: Context) : Future[Result[_]] = Future.successful { StringResult(text) }
 }
 
+case class StaticNode(
+  description: String,
+  body: Html
+) extends Node {
+  final val kind : Symbol = 'Static
+  val mediaType: MediaType = MediaTypes.`text/html`
+  var enabled: Boolean = true
+  val modified  = None
+  val created = None
+  def apply(ctxt: Context): Future[Result[_]] = Future.successful {
+    HtmlResult(body, Successful)
+  }
+}
+
+object StaticNode {
+  implicit val StaticNodeHandler : BSONHandler[BSONDocument,StaticNode] = Macros.handler[StaticNode]
+}
+
 /** Message Node
   *
   * This is a very simple node that simply renders a standard Boostrap message. It is used for generating error messages
@@ -537,6 +555,7 @@
         case Some(str) =>
           str.value match {
             case "Message"  ⇒ MessageNode.MessageNodeHandler.read(doc)
+            case "Static"   ⇒ StaticNode.StaticNodeHandler.read(doc)
             case "Html"     ⇒ HtmlNode.HtmlNodeHandler.read(doc)
             case "Txt"      ⇒ TxtNode.TxtNodeHandler.read(doc)
             case "File"     ⇒ FileNode.FileNodeHandler.read(doc)
@@ -556,6 +575,7 @@
     def write(node: Node) : BSONDocument = {
       node.kind match {
         case 'Message  ⇒ MessageNode.MessageNodeHandler.write(node.asInstanceOf[MessageNode])
+        case 'Static   ⇒ StaticNode.StaticNodeHandler.write(node.asInstanceOf[StaticNode])
         case 'Html     ⇒ HtmlNode.HtmlNodeHandler.write(node.asInstanceOf[HtmlNode])
         case 'Txt      ⇒ TxtNode.TxtNodeHandler.write(node.asInstanceOf[TxtNode])
         case 'File     ⇒ FileNode.FileNodeHandler.write(node.asInstanceOf[FileNode])
Index: scrupal-core/src/scrupal/core/views/pages/docPage.scala.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-core/src/scrupal/core/views/pages/docPage.scala.html	(revision 6bdba0e75c739e0ff7452474fba4615553fc9f8e)
+++ scrupal-core/src/scrupal/core/views/pages/docPage.scala.html	(revision )
@@ -4,6 +4,7 @@
 <div class="panel panel-primary">
 <div class="panel-heading"><h1 class="panel-title">Welcome To Scrupal!</h1></div>
 <div class="panel-body">
+@@@@@@menu@@@@@@
 <div class="well">
 } { @@@@@@content@@@@@@ } {
 </div>
Index: scrupal-api/src/scrupal/api/AssetLocator.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-api/src/scrupal/api/AssetLocator.scala	(revision 6bdba0e75c739e0ff7452474fba4615553fc9f8e)
+++ scrupal-api/src/scrupal/api/AssetLocator.scala	(revision )
@@ -116,16 +116,7 @@
 
   val directoryAssetName = "__dir.conf"
 
-  case class Directory(
-    author : Option[String] = None,
-    copyright : Option[String] = None,
-    license : Option[OSSLicense] = None,
-    title : Option[String] = None,
-    description: Option[String] = None,
-    index : Option[String] = None,
-    files : Map[String, (String,Option[URL])],
-    dirs : Map[String, Option[Directory]]
-  )
+  import AssetLocator.Directory
 
   def fetchDirectory(path: String, recurse: Boolean = false) : Option[Directory] = {
     val cfg: Config = ConfigFactory.parseResourcesAnySyntax(cl, path + "/" + directoryAssetName)
@@ -155,8 +146,8 @@
           dirs.toMap
         }
     }
-    Some(Directory(config.getString("author"), config.getString("copyright"), license, config.getString("title"),
-              config.getString("description"), config.getString("index"), files, dirs))
+    Some(Directory(config.getString("author"), config.getString("copyright"), license, config.getString("name"),
+      config.getString("title"), config.getString("description"), config.getString("index"), files, dirs))
   }
 
   def isFile(url: URL) = { url != null && url.getProtocol == "file" }
@@ -214,3 +205,16 @@
   def assets_path = asset_path_from_config(config)
 }
 
+object AssetLocator {
+  case class Directory(
+    author : Option[String] = None,
+    copyright : Option[String] = None,
+    license : Option[OSSLicense] = None,
+    name : Option[String] = None,
+    title : Option[String] = None,
+    description: Option[String] = None,
+    index : Option[String] = None,
+    files : Map[String, (String,Option[URL])],
+    dirs : Map[String, Option[Directory]]
+  )
+}
Index: scrupal-core/src/scrupal/core/MarkedDocument.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-core/src/scrupal/core/MarkedDocument.scala	(revision 6bdba0e75c739e0ff7452474fba4615553fc9f8e)
+++ scrupal-core/src/scrupal/core/MarkedDocument.scala	(revision )
@@ -30,7 +30,7 @@
   * @param id Name of the entity and its path key
   * @param root Root of the documents as found in the classpath via the asset locator
   */
-case class MarkedDocument(id: Symbol, root: String) extends Entity {
+case class MarkedDocument(id: Symbol, root: String, roots: Seq[String] = Seq.empty[String]) extends Entity {
 
   def kind: Symbol = 'MarkedDoc
 
@@ -42,6 +42,34 @@
 
   def description: String = "An entity that stores nothing and merely echos its requests"
 
+  def  menuItems(context: Context) : Map[String,Map[String,String]] = {
+    val locator = context.scrupal.assetsLocator
+    for (root ← roots) yield {
+      locator.fetchDirectory(root) match {
+        case Some(dir) ⇒
+          val key = dir.name.getOrElse(root.substring(root.lastIndexOf('/')+1))
+          val map = for ((k,(v1,v2)) ← dir.files) yield {
+            v1 → k
+          }
+          key -> map
+        case None ⇒ key → Map.empty[String,String]
+      }
+    }
+  }.toMap
+
+  var menuHtml : Option[Html] = None
+
+  def menu(context: Context) : Html = {
+    menuHtml match {
+      case Some(m) ⇒ m
+      case None ⇒ {
+        val result = scrupal.core.views.html.pages.docNav(menuItems(context))
+        menuHtml = Some(result)
+        result
+      }
+    }
+  }
+
   def findDocument(context: Context, id: String) : Future[Result[_]] = {
     val locator = context.scrupal.assetsLocator
     locator.fetchDirectory(root) match {
@@ -63,9 +91,11 @@
               case Some(url) ⇒
                 val title = StringNode("docTitle", docTitle)
                 val content = URLNode("docUrl", url)
+                val menuNode = StaticNode("Menu", menu(context))
                 val footer = HtmlNode(doc, docFooter, Map("footer" → Html(dir.copyright.getOrElse("Footer"))))
                 val subordinates: Map[String, Either[NodeRef, Node]] = Map(
                   "title" → Right(title),
+                  "menu" → Right(menuNode),
                   "content" → Right(content),
                   "footer" → Right(footer)
                 )
@@ -97,5 +127,6 @@
 
   object docFooter extends
   TwirlHtmlTemplate('docFooter, "Footer for Marked Documentation", scrupal.core.views.html.docFooter)
+
 
 }
Index: scrupal-core/assets/docs/core/__dir.conf
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-core/assets/docs/core/__dir.conf	(revision 6bdba0e75c739e0ff7452474fba4615553fc9f8e)
+++ scrupal-core/assets/docs/core/__dir.conf	(revision )
@@ -1,5 +1,6 @@
 {
-  title : "Scrupal API Document"
+  title : "Scrupal Core Document"
+  name : "Core"
   description : "Just For Testing"
   author : "Reid Spencer"
   copyright : "(C) 2014 Reactific Software LLC. All Rights Reserved."
Index: scrupal-api/src/scrupal/api/views/pages/basicPage.scala.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-api/src/scrupal/api/views/pages/basicPage.scala.html	(revision 6bdba0e75c739e0ff7452474fba4615553fc9f8e)
+++ scrupal-api/src/scrupal/api/views/pages/basicPage.scala.html	(revision )
@@ -11,6 +11,7 @@
     <link rel="stylesheet" href="@PathOf.theme(context.themeProvider,context.themeName)" media="screen">
     <link rel="stylesheet" href="@PathOf.lib( "font-awesome", "css/font-awesome.css" )" media="screen">
     <link rel="stylesheet" href="@PathOf.css( "scrupal" )" media="screen">
+    <script type="text/javascript" src="@PathOf.lib("bootstrap", "js/bootstrap.min.js")"></script>
     @headSuffix
 </head>
 <body>
Index: scrupal-core/src/scrupal/core/WelcomeSite.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-core/src/scrupal/core/WelcomeSite.scala	(revision 6bdba0e75c739e0ff7452474fba4615553fc9f8e)
+++ scrupal-core/src/scrupal/core/WelcomeSite.scala	(revision )
@@ -19,6 +19,7 @@
 
 import org.joda.time.DateTime
 import play.twirl.api.Html
+import scrupal.api.AssetLocator
 import scrupal.api._
 import shapeless.{::, HList, HNil}
 import spray.http.Uri
@@ -59,11 +60,13 @@
   EchoEntity.enable(this)
   CoreModule.enable(EchoEntity)
 
-  val apiDoc = new MarkedDocument('api, "docs/api") ;       apiDoc.enable(this)   ; CoreModule.enable(apiDoc)
-  val coreDoc = new MarkedDocument('core, "docs/core");     coreDoc.enable(this)  ; CoreModule.enable(coreDoc)
-  val dbDoc = new MarkedDocument('db, "docs/db");           dbDoc.enable(this)    ; CoreModule.enable(dbDoc)
-  val httpDoc = new MarkedDocument('http, "docs/http");     httpDoc.enable(this)  ; CoreModule.enable(httpDoc)
-  val utilsDoc = new MarkedDocument('utils, "docs/utils");  utilsDoc.enable(this) ; CoreModule.enable(utilsDoc)
+  val roots = Seq("docs/api", "docs/core", "docs/db", "docs/http", "docs/utils")
+
+  val apiDoc = new MarkedDocument('api, "docs/api", roots) ;       apiDoc.enable(this)   ; CoreModule.enable(apiDoc)
+  val coreDoc = new MarkedDocument('core, "docs/core", roots);     coreDoc.enable(this)  ; CoreModule.enable(coreDoc)
+  val dbDoc = new MarkedDocument('db, "docs/db", roots);           dbDoc.enable(this)    ; CoreModule.enable(dbDoc)
+  val httpDoc = new MarkedDocument('http, "docs/http", roots);     httpDoc.enable(this)  ; CoreModule.enable(httpDoc)
+  val utilsDoc = new MarkedDocument('utils, "docs/utils", roots);  utilsDoc.enable(this) ; CoreModule.enable(utilsDoc)
 }
 
 object WelcomeSite {
Index: scrupal-core/src/scrupal/core/views/pages/docNav.scala.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-core/src/scrupal/core/views/pages/docNav.scala.html	(revision )
+++ scrupal-core/src/scrupal/core/views/pages/docNav.scala.html	(revision )
@@ -0,0 +1,13 @@
+@(menu: Map[String,Map[String,String]])
+<div class="well-small">
+@for((k,v) ← menu) {
+  <div class="btn-group">
+    <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">@k <span class="caret"></span></button>
+    <ul class="dropdown-menu" role="menu">
+      @for((label,href) ← v ) {
+        <li><a data-target="#" href="@href">@label</a></li>
+      }
+    </ul>
+  </div>
+}
+</div>
Index: scrupal-api/test/scrupal/api/AssetLocatorSpec.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-api/test/scrupal/api/AssetLocatorSpec.scala	(revision 6bdba0e75c739e0ff7452474fba4615553fc9f8e)
+++ scrupal-api/test/scrupal/api/AssetLocatorSpec.scala	(revision )
@@ -132,7 +132,7 @@
     "grok recursing directories" in {
       val dirOpt = locator.fetchDirectory("root", recurse=true)
       dirOpt.isDefined must beTrue
-      val dir : AssetLocator#Directory = dirOpt.get
+      val dir : AssetLocator.Directory = dirOpt.get
       val dirs = dir.dirs
       val empty = dirs.get("empty")
       empty.isDefined must beTrue
Index: scrupal-api/src/scrupal/api/Forms.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrupal-api/src/scrupal/api/Forms.scala	(revision 6bdba0e75c739e0ff7452474fba4615553fc9f8e)
+++ scrupal-api/src/scrupal/api/Forms.scala	(revision )
@@ -25,7 +25,7 @@
   * This object just contains the form related things. Note that this is a very general notion of forms and not
   * much tied to the HTML ideas. Forms are Inputs inside Sections inside Pages. Inputs are named Types. All of
   * these are storable and are Validators so we can validate a BSON document against a form. This should be used
-  * for all input
+  * for all input to Scrupal.
   */
 object Forms {
 
